const express = require('express');
const cors = require('cors');
const path = require('path');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());

// Serve static files from React build
app.use(express.static(path.join(__dirname, '../client/public/dist')));

// OpenAI configuration
let openai = null;
if (process.env.OPENAI_API_KEY) {
  const OpenAI = require('openai');
  openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
  });
}

// Mock responses for when OpenAI API key is not available
const mockResponses = [
  "I'm a mock AI response! This appears when no OpenAI API key is configured. The real AI would provide a thoughtful answer to your question.",
  "This is a placeholder response. To get real AI responses, please set your OPENAI_API_KEY in the .env file.",
  "Mock response: I understand you're asking about this topic. In a real implementation, I would provide a detailed answer based on your prompt.",
  "Placeholder: Your question is interesting! With a proper API key, I could give you a comprehensive response.",
  "Demo mode: This simulates what an AI response would look like. The actual response would be generated by OpenAI's GPT model."
];

// API Routes
app.post('/query', async (req, res) => {
  try {
    const { prompt } = req.body;
    
    if (!prompt || prompt.trim() === '') {
      return res.status(400).json({ 
        error: 'Prompt is required',
        response: 'Please provide a prompt to get an AI response.'
      });
    }

    let response;
    let isMock = false;
    
    if (openai) {
      try {
        // Real OpenAI API call
        const completion = await openai.chat.completions.create({
          model: "gpt-3.5-turbo",
          messages: [
            {
              role: "system",
              content: "You are a helpful assistant. Provide clear, concise, and informative responses to user queries."
            },
            {
              role: "user",
              content: prompt
            }
          ],
          max_tokens: 500,
          temperature: 0.7,
        });
        
        response = completion.choices[0].message.content;
      } catch (apiError) {
        console.error('OpenAI API Error:', apiError.message);
        
        // Handle specific API errors gracefully
        if (apiError.status === 429 || apiError.code === 'insufficient_quota') {
          response = "I'm currently experiencing high demand. Here's a demo response: " + mockResponses[Math.floor(Math.random() * mockResponses.length)];
          isMock = true;
        } else if (apiError.status === 401) {
          response = "API key authentication failed. Running in demo mode: " + mockResponses[Math.floor(Math.random() * mockResponses.length)];
          isMock = true;
        } else {
          response = "Sorry, I'm having trouble connecting to the AI service right now. Here's a demo response: " + mockResponses[Math.floor(Math.random() * mockResponses.length)];
          isMock = true;
        }
      }
    } else {
      // Mock response when no API key
      const randomIndex = Math.floor(Math.random() * mockResponses.length);
      response = mockResponses[randomIndex];
      isMock = true;
    }

    res.json({ 
      response,
      isMock,
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('Error processing query:', error);
    res.status(500).json({ 
      error: 'Failed to process query',
      response: 'Sorry, I encountered an error while processing your request. Please try again.',
      details: error.message
    });
  }
});

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    openaiConfigured: !!openai
  });
});

// Serve React app for all other routes
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, '../client/public/dist', 'index.html'));
});

app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
  console.log(`OpenAI API ${openai ? 'configured' : 'not configured - using mock responses'}`);
}); 